---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import Backlink from '../../components/backlink.astro';

export async function getStaticPaths() {
  const mysteries = await getCollection('cosmos');
  return mysteries.map((mystery) => ({
    params: { slug: mystery.id.replace(/\.(md|mdx)$/, '') },
    props: mystery,
  }));
}

type Props = CollectionEntry<'cosmos'>;

const cosmos = Astro.props;
const { Content } = await render(cosmos);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`${cosmos.data.title} | Cosmo`} description={cosmos.data.description} />
    {/* Debug canonical URL */}
    {(() => {
      const canonicalUrl = new URL(Astro.url.pathname.endsWith('/') ? Astro.url.pathname : Astro.url.pathname + '/', Astro.site).toString();
      console.log('Canonical URL:', canonicalUrl);
      return <link rel="canonical" href={canonicalUrl} />;
    })()}
    
    {/* Schema.org markup for Google */}
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Article",
      "headline": cosmos.data.title,
      "description": cosmos.data.description,
      "image": cosmos.data.heroImage ? new URL(cosmos.data.heroImage.src, Astro.site).toString() : undefined,
      "datePublished": cosmos.data.pubDate.toISOString(),
      "author": {
        "@type": "Organization",
        "name": "The Beyond Index"
      },
      "publisher": {
        "@type": "Organization",
        "name": "The Beyond Index",
        "logo": {
          "@type": "ImageObject",
          "url": new URL("/favicon.svg", Astro.site).toString()
        }
      },
      "keywords": cosmos.data.tags ? cosmos.data.tags.join(", ") : undefined,
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": new URL(Astro.url.pathname.endsWith('/') ? Astro.url.pathname : Astro.url.pathname + '/', Astro.site).toString()
      }
    })} />
    
  </head>
  <body>
    <Header />
    <main>
      <article>
        <h1>{cosmos.data.title}</h1>
        {cosmos.data.tags && (
          <div class="tags">
            {cosmos.data.tags.map((tag: string) => (
              <span class="tag">{tag}</span>
            ))}
          </div>
        )}
        <time datetime={cosmos.data.pubDate.toISOString()}>
          {cosmos.data.pubDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })}
        </time>
        
        {cosmos.data.heroImage && (
          <img 
            src={cosmos.data.heroImage.src} 
            alt="" 
            width={cosmos.data.heroImage.width}
            height={cosmos.data.heroImage.height}
            loading="lazy"
            decoding="async"
          />
        )}
        
        <div class="content">
          <Content />
          <Backlink collection="cosmos" currentSlug={cosmos.id.replace(/\.(md|mdx)$/, '')}/>

        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>

<style>
  article {
    max-width: 65ch;
    margin: 0 auto;
    padding: 2rem 1rem;
  }
  
  h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }
  
  time {
    color: var(--theme-text-light);
    display: block;
    margin-bottom: 2rem;
  }
  
  :global(h2) {
    margin-top: 3rem;
  }
  
  :global(p) {
    line-height: 1.6;
    margin: 1.5rem 0;
  }
  
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    opacity: 0.8;
  }
  
  .tag {
    font-size: 0.85rem;
    background-color: #f0f0f0;
    color: #777;
    padding: 0.2rem 0.6rem;
    border-radius: 1rem;
    display: inline-block;
  }
</style>
